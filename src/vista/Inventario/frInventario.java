/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.Inventario;


import entidades.Sucursal;
import entidades.articulo.Articulo;
import entidades.articulo.PrecioArticulo;
import entidades.inventario.ArticuloInventario;
import entidades.inventario.Inventario;

import entidades.promocion.PromocionArticulo;
import entidades.usuario.Usuario;
import facade.ArticuloFacade;
import facade.ArticuloInventarioFacade;
import facade.InventarioFacade;
import facade.PrecioArticuloFacade;
import giovynet.serial.Com;
import gnu.io.CommPortIdentifier;
import gnu.io.SerialPort;
import includes.Comunes;
import includes.Impresora;
import includes.ModeloTablaNoEditable;
import includes.SuperFrame;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.Timer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import vista.articulos.DiagBuscarArticulo;
import vista.frPrincipal;

/**
 *
 * @author hugo
 */
public class frInventario extends SuperFrame {

    CommPortIdentifier idPuerto = null;
    private List<String> listaPuertos;
    private Com com1;
    // variables nuevas 
    private CommPortIdentifier IdPuerto;
    private Enumeration portList;
    private InputStream inputStream;
    private Thread readThread;
    private boolean hiloIniciado;
    private Articulo articulo;
    private List<ArticuloInventario> listaArticuloInventario = new ArrayList<>();
    private ArticuloInventario articuloInventario = new ArticuloInventario();
    private Inventario inventario;
    private ModeloTablaNoEditable modeloTablaArticulos;
    private Usuario usuario;
    private Sucursal sucursal;

    private BigDecimal subTotalArticulo;

    private BigDecimal total;

    private KeyEventDispatcher keyDispaycher;
    private Color color;
    private Color colorPorDefecto;
    private Color colorBoton;
    private PrecioArticulo precioComun;


    /**
     * Creates new form FrmVentas
     *

     * @param usuario
     * @param sucursal
     */
    public frInventario(Usuario usuario, Sucursal sucursal) {
        initComponents();
        this.usuario = usuario;
        this.sucursal = sucursal;

        this.setSize(new Dimension(Toolkit.getDefaultToolkit().getScreenSize()));
        this.setTitle("Inventario : " + usuario);
        this.setLocation(Comunes.centrarFrame(this));
        inicializarComponentes();
    }

    public frInventario() {
        initComponents();
        //maximizamos frame
        this.setSize(new Dimension(Toolkit.getDefaultToolkit().getScreenSize()));
        this.setTitle("Inventario : " + usuario);
        //configuramos tabla
        inicializarComponentes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        tfCodigo = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tfDescripcion = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tfPrecio = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tfPesoBalanza = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfCantidad = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        tfMonto = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblArticulos = new javax.swing.JTable();
        jLabel13 = new javax.swing.JLabel();
        tfTotal = new javax.swing.JTextField();
        btnNuevo_inv = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        dpFecha = new org.jdesktop.swingx.JXDatePicker();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        cbMes = new javax.swing.JComboBox<>();
        cbAnio = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        tfSucursal = new javax.swing.JTextField();
        tfInventario = new java.awt.TextField();
        jbBuscarPersona = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(frInventario.class, "frInventario.jPanel3.border.title"))); // NOI18N

        tfCodigo.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        tfCodigo.setText(org.openide.util.NbBundle.getMessage(frInventario.class, "frInventario.tfCodigo.text")); // NOI18N
        tfCodigo.setNextFocusableComponent(tblArticulos);
        tfCodigo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfCodigoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfCodigoFocusLost(evt);
            }
        });
        tfCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfCodigoActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel5.setText(org.openide.util.NbBundle.getMessage(frInventario.class, "frInventario.jLabel5.text")); // NOI18N

        tfDescripcion.setEditable(false);
        tfDescripcion.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        tfDescripcion.setText(org.openide.util.NbBundle.getMessage(frInventario.class, "frInventario.tfDescripcion.text")); // NOI18N
        tfDescripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfDescripcionActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel6.setText(org.openide.util.NbBundle.getMessage(frInventario.class, "frInventario.jLabel6.text")); // NOI18N

        tfPrecio.setEditable(false);
        tfPrecio.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        tfPrecio.setText(org.openide.util.NbBundle.getMessage(frInventario.class, "frInventario.tfPrecio.text")); // NOI18N

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel7.setText(org.openide.util.NbBundle.getMessage(frInventario.class, "frInventario.jLabel7.text")); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(frInventario.class, "frInventario.jPanel1.border.title"))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel1.setText(org.openide.util.NbBundle.getMessage(frInventario.class, "frInventario.jLabel1.text")); // NOI18N

        tfPesoBalanza.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        tfPesoBalanza.setText(org.openide.util.NbBundle.getMessage(frInventario.class, "frInventario.tfPesoBalanza.text")); // NOI18N
        tfPesoBalanza.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfPesoBalanzaKeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel2.setText(org.openide.util.NbBundle.getMessage(frInventario.class, "frInventario.jLabel2.text")); // NOI18N

        tfCantidad.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        tfCantidad.setText(org.openide.util.NbBundle.getMessage(frInventario.class, "frInventario.tfCantidad.text")); // NOI18N
        tfCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfCantidadActionPerformed(evt);
            }
        });
        tfCantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfCantidadKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(7, 7, 7)
                .addComponent(tfPesoBalanza, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tfPesoBalanza)
                    .addComponent(jLabel1)
                    .addComponent(tfCantidad))
                .addContainerGap())
        );

        jLabel14.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel14.setText(org.openide.util.NbBundle.getMessage(frInventario.class, "frInventario.jLabel14.text")); // NOI18N

        tfMonto.setEditable(false);
        tfMonto.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        tfMonto.setText(org.openide.util.NbBundle.getMessage(frInventario.class, "frInventario.tfMonto.text")); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(tfCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(tfDescripcion))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(tfPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(50, 50, 50)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfMonto, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tfMonto, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel14)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(frInventario.class, "frInventario.jPanel4.border.title"))); // NOI18N

        tblArticulos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblArticulos);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(317, 317, 317))
        );

        jLabel13.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel13.setText(org.openide.util.NbBundle.getMessage(frInventario.class, "frInventario.jLabel13.text")); // NOI18N

        tfTotal.setEditable(false);
        tfTotal.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        tfTotal.setText(org.openide.util.NbBundle.getMessage(frInventario.class, "frInventario.tfTotal.text")); // NOI18N

        btnNuevo_inv.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/accept.png"))); // NOI18N
        btnNuevo_inv.setText(org.openide.util.NbBundle.getMessage(frInventario.class, "frInventario.btnNuevo_inv.text")); // NOI18N
        btnNuevo_inv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevo_invActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/back.png"))); // NOI18N
        jButton2.setText(org.openide.util.NbBundle.getMessage(frInventario.class, "frInventario.jButton2.text")); // NOI18N
        jButton2.setAlignmentX(0.5F);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        dpFecha.setFormats("dd/MM/yyyy");

        jLabel3.setText(org.openide.util.NbBundle.getMessage(frInventario.class, "frInventario.jLabel3.text")); // NOI18N

        jLabel4.setText(org.openide.util.NbBundle.getMessage(frInventario.class, "frInventario.jLabel4.text")); // NOI18N

        jLabel10.setText(org.openide.util.NbBundle.getMessage(frInventario.class, "frInventario.jLabel10.text")); // NOI18N

        cbMes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" }));

        jLabel11.setText(org.openide.util.NbBundle.getMessage(frInventario.class, "frInventario.jLabel11.text")); // NOI18N

        tfSucursal.setEditable(false);
        tfSucursal.setText(org.openide.util.NbBundle.getMessage(frInventario.class, "frInventario.tfSucursal.text")); // NOI18N
        tfSucursal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfSucursalActionPerformed(evt);
            }
        });

        tfInventario.setEditable(false);
        tfInventario.setEnabled(false);
        tfInventario.setText(org.openide.util.NbBundle.getMessage(frInventario.class, "frInventario.tfInventario.text")); // NOI18N
        tfInventario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfInventarioActionPerformed(evt);
            }
        });

        jbBuscarPersona.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        jbBuscarPersona.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/buscar2.png"))); // NOI18N
        jbBuscarPersona.setText(org.openide.util.NbBundle.getMessage(frInventario.class, "frInventario.jbBuscarPersona.text")); // NOI18N
        jbBuscarPersona.setToolTipText(org.openide.util.NbBundle.getMessage(frInventario.class, "frInventario.jbBuscarPersona.toolTipText")); // NOI18N
        jbBuscarPersona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarPersonaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(tfSucursal, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(cbMes, javax.swing.GroupLayout.Alignment.LEADING, 0, 188, Short.MAX_VALUE))
                    .addComponent(dpFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jbBuscarPersona, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(tfInventario, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addComponent(cbAnio, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(dpFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(jbBuscarPersona))
                    .addComponent(tfInventario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel10)
                    .addComponent(cbMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbAnio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(tfSucursal, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jLabel17.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel17.setText(org.openide.util.NbBundle.getMessage(frInventario.class, "frInventario.jLabel17.text")); // NOI18N

        jLabel18.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel18.setText(org.openide.util.NbBundle.getMessage(frInventario.class, "frInventario.jLabel18.text")); // NOI18N

        jLabel19.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel19.setText(org.openide.util.NbBundle.getMessage(frInventario.class, "frInventario.jLabel19.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(474, 474, 474)
                        .addComponent(jLabel13)
                        .addGap(18, 18, 18)
                        .addComponent(tfTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(136, 136, 136)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnNuevo_inv)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addGap(53, 53, 53)
                        .addComponent(jLabel18)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(btnNuevo_inv, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jLabel18)
                    .addComponent(jLabel19))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevo_invActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevo_invActionPerformed
       inicializarComponentes();
    }//GEN-LAST:event_btnNuevo_invActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        cerrar();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void tfCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfCodigoActionPerformed

    buscarArticulo();              
 
    }//GEN-LAST:event_tfCodigoActionPerformed

    private void tfCodigoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfCodigoFocusGained
        tfCodigo.setBackground(color);
    }//GEN-LAST:event_tfCodigoFocusGained

    private void tfCodigoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfCodigoFocusLost
        tfCodigo.setBackground(colorPorDefecto);
    }//GEN-LAST:event_tfCodigoFocusLost

    private void tfPesoBalanzaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPesoBalanzaKeyTyped
        // TODO add your handling code here:
        Comunes.soloNumeros(tfPesoBalanza, evt);
    }//GEN-LAST:event_tfPesoBalanzaKeyTyped

    private void tfCantidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfCantidadKeyTyped
        // TODO add your handling code here:
        Comunes.soloNumeros(tfCantidad, evt);
    }//GEN-LAST:event_tfCantidadKeyTyped

    private void tfCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfCantidadActionPerformed
        cargarArticuloPeso();
    }//GEN-LAST:event_tfCantidadActionPerformed

    private void tfSucursalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfSucursalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfSucursalActionPerformed

    private void tfDescripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfDescripcionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfDescripcionActionPerformed

    private void tfInventarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfInventarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfInventarioActionPerformed

    private void jbBuscarPersonaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarPersonaActionPerformed
        llamarDialogInventarioFind();
    }//GEN-LAST:event_jbBuscarPersonaActionPerformed

    /**
     * @param args the command line arguments
     */
    private void main(String args[]) {

        frInventario frVentas = new frInventario();
        frVentas.setVisible(true);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNuevo_inv;
    private javax.swing.JComboBox<String> cbAnio;
    private javax.swing.JComboBox<String> cbMes;
    private org.jdesktop.swingx.JXDatePicker dpFecha;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbBuscarPersona;
    public javax.swing.JTable tblArticulos;
    private javax.swing.JTextField tfCantidad;
    private javax.swing.JTextField tfCodigo;
    private javax.swing.JTextField tfDescripcion;
    private java.awt.TextField tfInventario;
    private javax.swing.JTextField tfMonto;
    private javax.swing.JTextField tfPesoBalanza;
    private javax.swing.JTextField tfPrecio;
    private javax.swing.JTextField tfSucursal;
    private javax.swing.JTextField tfTotal;
    // End of variables declaration//GEN-END:variables

    private void inicializarComponentes() {
        
    llenarCbAnio();
    tfSucursal.setText(sucursal.getNombre());
    dpFecha.requestFocus();
    eventosDeTeclas();
        //en caso de que no este la balanza
        if (frPrincipal.peso != null) {
            int delay = 100; //milliseconds (estaba en 40)
            ActionListener taskPerformer = new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    tfPesoBalanza.setText(frPrincipal.peso);

                }
            };
            new Timer(delay, taskPerformer).start();
        } else {
            tfPesoBalanza.setEditable(true);
        }
    tfInventario.setText("");
    habilitar();
    limpiarCampos();
    }

    public void cerrar() {

        this.dispose();
    }

    @Override
    public void dispose() {
        KeyboardFocusManager.getCurrentKeyboardFocusManager().removeKeyEventDispatcher(keyDispaycher);
        keyDispaycher = null;
        limpiarCampos();
        super.dispose();
    }

    private void buscarArticulo() {
/*  */
        Boolean bExiste = false;
        for (int i = 0; i < listaArticuloInventario.size(); i++) {
            if (tfCodigo.getText().equals(listaArticuloInventario.get(i).getArticuloCodigo())) {
                bExiste = true;
                break;
            } else {
                bExiste = false;
            }

        }//for
        if (!bExiste) {
            articulo = ArticuloFacade.getInstance().buscarPorCodigo(tfCodigo.getText());
            if (articulo != null) {
                if (PrecioArticuloFacade.getInstance().getComun(articulo, sucursal) != null) {
                    if (!articulo.getUnidadMedida().isEsPeso()) {
                        //Es por cantidad
                        limpiarCamposArticulo();
                        tfCodigo.setText(articulo.getCodigoBarra());
                        tfDescripcion.setText(articulo.getDescripcion());
                        tfCantidad.requestFocus();
                    } else {
                        //Es por peso
                        tfCantidad.setText("");
                        cargarArticulo();
                        tfCodigo.selectAll();

                    }
                } else {
                    tfCodigo.setText("");
                }

            } //if(articulo != null) 
            else {
                DiagBuscarArticulo buscarArticulo = new DiagBuscarArticulo(null, true);
                buscarArticulo.setLocation(Comunes.centrarDialog(buscarArticulo));
                buscarArticulo.setVisible(true);
                if (buscarArticulo.getArticulo() != null) {
                    articulo = buscarArticulo.getArticulo();
                    if (PrecioArticuloFacade.getInstance().getComun(articulo, sucursal) != null) {

                        if (!articulo.getUnidadMedida().isEsPeso()) {
                            //Es por cantidad
                            limpiarCamposArticulo();
                            tfCodigo.setText(articulo.getCodigoBarra());
                            tfDescripcion.setText(articulo.getDescripcion());
                            tfCantidad.requestFocus();
                        } else {
                            //Es por peso
                            cargarArticulo();
                            tfCodigo.selectAll();
                        }
                    } else {
                        tfCodigo.setText("");
                    }//else if (PrecioArticuloFacade.getInstance().getComun(articulo, sucursal) != null)

                }//if (buscarArticulo.getArticulo() != null)

            }//else if(articulo != null)

            System.out.println("ia art: " + articulo.getId());
        } else {

            JOptionPane.showMessageDialog(null,
                    "Ya existe este articulo para este inventario", "Mensaje", JOptionPane.ERROR_MESSAGE);
            tfCodigo.requestFocus();
        }
    }

    private void cargarArticulo() {
        tfCodigo.setText(articulo.getCodigoBarra());
        tfDescripcion.setText(articulo.getDescripcion());
        cargarPrecioArticulo();
        calcularMontoArticulo();
        
        
    }
    
    private void calcularMontoArticulo() {
        if (!articulo.getUnidadMedida().isEsPeso()) {
            //por cantidad

            subTotalArticulo = precioComun.getPrecio().multiply(BigDecimal.valueOf(Double.parseDouble(tfCantidad.getText())));

            tfMonto.setText(new DecimalFormat("0.00").format(Double.parseDouble(subTotalArticulo.toString())));
        } else //por peso
        if (!tfPesoBalanza.getText().isEmpty()) {

            subTotalArticulo = precioComun.getPrecio().multiply(BigDecimal.valueOf(Double.parseDouble(tfPesoBalanza.getText())));
            tfMonto.setText(new DecimalFormat("0.00").format(Double.parseDouble(subTotalArticulo.toString())));
        } else {
            JOptionPane.showMessageDialog(null, "Este es un articulo para pesar!");
            limpiarCamposArticulo();
            tfCodigo.requestFocus();

        }
    }    

    private void agregarArticulo() {

            cargarTablaArticulos(listaArticuloInventario);


            limpiarCamposArticulo();
            //agregados

            tfCodigo.setText("");
            tfCodigo.requestFocus();
            articulo = new Articulo();

    }
    
private void deshabilitar(){
dpFecha.setEnabled(false);
cbMes.setEnabled(false);
cbAnio.setEnabled(false);
}

private void habilitar(){
dpFecha.setEnabled(true);
cbMes.setEnabled(true);
cbAnio.setEnabled(true);
}
    private void cargarTablaArticulos(List<ArticuloInventario> listaVentaArticulos) {
        modeloTablaArticulos = new ModeloTablaNoEditable();
        cargarEncabezadosTablaArticulos(modeloTablaArticulos);
        configurarTabla(tblArticulos);
        try {
            cargarArticulos(listaVentaArticulos);
        } catch (Exception ex) {
            Logger.getLogger(frInventario.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void cargarEncabezadosTablaArticulos(ModeloTablaNoEditable modeloTablaArticulos) {
        modeloTablaArticulos.addColumn("Id");
        modeloTablaArticulos.addColumn("Codigo");
        modeloTablaArticulos.addColumn("Articulo");
        modeloTablaArticulos.addColumn("Peso Neto/Cantidad");
        modeloTablaArticulos.addColumn("Precio U.");
        modeloTablaArticulos.addColumn("Monto");
        tblArticulos.setModel(modeloTablaArticulos);
    }

    private void configurarTabla(JTable tbl) {
        JViewport scroll = (JViewport) tbl.getParent();
        int ancho = scroll.getWidth();
        int anchoColumna = 0;
        TableColumnModel modeloColumna = tbl.getColumnModel();
        TableColumn columnaTabla;
        for (int i = 0; i < tbl.getColumnCount(); i++) {
            columnaTabla = modeloColumna.getColumn(i);
            switch (i) {
                case 0:
                    anchoColumna = (1 * ancho) / 100;
                    break;
                case 1:
                    anchoColumna = (20 * ancho) / 100;
                    break;
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                    anchoColumna = (5 * ancho) / 100;
                    break;
            }
            columnaTabla.setPreferredWidth(anchoColumna);
            tbl.setColumnModel(modeloColumna);
        }
        tbl.getTableHeader().setFont(new java.awt.Font("Dialog",
                java.awt.Font.PLAIN, 10));
        tbl.getTableHeader().setBackground(java.awt.Color.WHITE);
        tbl.getTableHeader().setForeground(Color.BLACK);
        tbl.getTableHeader().setFont(new java.awt.Font("Dialog",
                java.awt.Font.PLAIN, 18));
        //Si le queremos cambiar el tamaño a la tablita
        tbl.setFont(new java.awt.Font("Dialog",
                java.awt.Font.PLAIN, 18));
    }

    private void cargarArticulos(List<ArticuloInventario> listaVentaArticulos) {
        try {
            modeloTablaArticulos = new ModeloTablaNoEditable();
            cargarEncabezadosTablaArticulos(modeloTablaArticulos);
            for (ArticuloInventario ventaArt : listaVentaArticulos) {
                cargarArticulos(ventaArt);
            }
            tblArticulos.setModel(modeloTablaArticulos);
            Comunes.setOcultarColumnasJTable(tblArticulos, 0);
        } catch (Exception ex) {
            Logger.getLogger(frInventario.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void cargarArticulos(ArticuloInventario ventaArticulo) {

        Object[] fila = new Object[6];
        fila[0] = ventaArticulo.getId();
        fila[1] = ventaArticulo.getArticuloCodigo();
        fila[2] = ventaArticulo.getArticuloDescripcion();
        fila[3] = new DecimalFormat("0.00").format(ventaArticulo.getCantidadPeso());
        fila[4] = new DecimalFormat("0.00").format(ventaArticulo.getPrecio().divide(ventaArticulo.getCantidadPeso()));
        fila[5] = new DecimalFormat("0.00").format(Double.parseDouble(ventaArticulo.getPrecio().toString()));
        modeloTablaArticulos.addRow(fila);
    }

    private void limpiarCamposArticulo() {
        tfCantidad.setText("");
        tfPesoBalanza.setText("");
        tfDescripcion.setText("");
        tfPrecio.setText("");
        tfMonto.setText("");
        subTotalArticulo = new BigDecimal(0.00);
    }


    private void cargarPrecioArticulo() {
        precioComun = new PrecioArticulo();
        precioComun = PrecioArticuloFacade.getInstance().getComun(articulo, sucursal);
        tfPrecio.setText(precioComun.getPrecio().toString());

    }

    private boolean validarArticulo() {

        if (articulo == null) {
            JOptionPane.showMessageDialog(null,
                    "Debe seleccionar un articulo", "Mensaje", JOptionPane.ERROR_MESSAGE);
            tfCodigo.requestFocus();
            return false;
        }
        if (articulo.getId() != null) {
            if (!articulo.getUnidadMedida().isEsPeso()) {
                if (tfCantidad.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null,
                            "Debe seleccionar cantidad y presionar Enter", "Mensaje", JOptionPane.ERROR_MESSAGE);
                    tfCantidad.requestFocus();
                    return false;

                }
            }
        }

        if (subTotalArticulo.compareTo(BigDecimal.ZERO) == 0) {
            JOptionPane.showMessageDialog(null,
                    "No se puede cargar precio/peso/cantidad nulos de articulos", "Mensaje", JOptionPane.ERROR_MESSAGE);
            tfCodigo.requestFocus();
            return false;
        }
        return true;
    }

    private void cargarTabla() {
        modeloTablaArticulos = new ModeloTablaNoEditable();
        cargarEncabezadosTablaArticulos(modeloTablaArticulos);
        configurarTabla(tblArticulos);
        Comunes.setOcultarColumnasJTable(tblArticulos, 0);
    }



    private void cargarArticuloPeso() {
            if (articulo != null) {
                cargarArticulo();
            } else {
                //JOptionPane.showMessageDialog(null, "Debe seleccionar un Articulo");
                tfCantidad.setText("");
                tfCodigo.requestFocus();
                tfCodigo.selectAll();
            }

    }

    private void limpiarCampos() {
        cargarTabla();
        limpiarCamposArticulo();
        listaArticuloInventario = new ArrayList<>();
//        listaArtInv_guardar = new ArrayList<>();
        tfCodigo.setText("");
        tfTotal.setText("");
        articulo = null;
        total = new BigDecimal(0.00);
        inventario = null;
        articuloInventario = null;

    }

    public void quitarArticuloLista() {

        int i = JOptionPane.showConfirmDialog(null, "¿Desea eliminar el articulo seleccionado?", "Confirmar eliminacion", JOptionPane.YES_NO_OPTION);
        if (i == 0) {
            int selectedRow = tblArticulos.getSelectedRow();
            String sValor = ((String) tblArticulos.getValueAt(selectedRow, 5)).trim().replace(",", ".");  
            BigDecimal bgMonto = new BigDecimal(sValor);
            String sTotal = tfTotal.getText().replace(",", ".");
           total= new BigDecimal(sTotal).subtract(bgMonto) ;//
            inventario.setId(Long.valueOf(tfInventario.getText()));
            inventario.setTotal(total);
            listaArticuloInventario.remove(selectedRow);
            inventario.setVentasArticulos(listaArticuloInventario); 
            InventarioFacade.getInstance().modificar(inventario);            
            
            ((ModeloTablaNoEditable) tblArticulos.getModel()).removeRow(selectedRow);
            tfTotal.setText(new DecimalFormat("0.00").format(total));

            tfCodigo.requestFocus();
            tfCodigo.selectAll();

        }
    }


    private void eventosDeTeclas() {
        //Fz
        //agregar
        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(
                KeyStroke.getKeyStroke(KeyEvent.VK_F3, 0), "agregar");
        getRootPane().getActionMap().put("agregar", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {

                    guardarInventario();
                    agregarArticulo();                



            }
        });

//cerrar
        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(
                KeyStroke.getKeyStroke(KeyEvent.VK_F4, 0), "cerrar");
        getRootPane().getActionMap().put("cerrar", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cerrar();
            }
        });

//borrar
        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(
                KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0), "borrar");
        getRootPane().getActionMap().put("borrar", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (tblArticulos.getSelectedRow() != -1) {
                    quitarArticuloLista();
                }
            }
        });
//confirmar
        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(
                KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0), "confirmar");
        getRootPane().getActionMap().put("confirmar", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (tblArticulos.isFocusOwner()) {
 //                   btnConfirmarPesada.requestFocus();
                }
            }
        });

        //evento que actualiza subtotales de pesaje cuando cambia el contenido pesado en la balanza
        tfPesoBalanza.getDocument().addDocumentListener(
                new javax.swing.event.DocumentListener() {

                    public void insertUpdate(javax.swing.event.DocumentEvent evt) {
                        actualizarSubtotal();

                    }

                    public void removeUpdate(javax.swing.event.DocumentEvent evt) {
                        actualizarSubtotal();

                    }

                    public void changedUpdate(javax.swing.event.DocumentEvent evt) {
                        actualizarSubtotal();

                    }

                });
        
    }


private void guardarInventario(){
    if (validarArticulo()) {
        articuloInventario = new ArticuloInventario();
        articuloInventario.setArticuloDescripcion(articulo.getDescripcionReducida());
        articuloInventario.setArticuloCodigo(articulo.getCodigoBarra());
        //segun sea por peso o cantidad la venta
        if (!articulo.getUnidadMedida().isEsPeso()) {
            articuloInventario.setCantidadPeso(BigDecimal.valueOf(Double.parseDouble(tfCantidad.getText())));
        } else {
            articuloInventario.setCantidadPeso(BigDecimal.valueOf(Double.parseDouble(tfPesoBalanza.getText())));
        }
        articuloInventario.setPrecio(subTotalArticulo);
        
        inventario = new Inventario();
        inventario.setFecha(dpFecha.getDate());
        inventario.setAnio(Integer.parseInt(cbAnio.getSelectedItem().toString()));
        inventario.setMes(cbMes.getSelectedIndex() + 1);
        inventario.setSucursal(sucursal);

        total = total.add(subTotalArticulo);

        inventario.setTotal(total);
        inventario.setUsuario(usuario);
        
        if(tfInventario.getText().isEmpty()){
            listaArticuloInventario = new ArrayList<>();
            listaArticuloInventario.add(articuloInventario);
            inventario.setVentasArticulos(listaArticuloInventario);    
            
            InventarioFacade.getInstance().alta(inventario);
            
tfInventario.setText(String.valueOf(InventarioFacade.getInstance().buscarUltimoInventario()));            
        }else{
            inventario.setId(Long.valueOf(tfInventario.getText()));
            listaArticuloInventario.add(articuloInventario);
            inventario.setVentasArticulos(listaArticuloInventario);
            
            InventarioFacade.getInstance().modificar(inventario);
                       
            listaArticuloInventario = InventarioFacade.getInstance().buscar(inventario.getId()).getVentasArticulos();

        }
        tfTotal.setText(new DecimalFormat("0.00").format(Double.parseDouble(total.toString())));
        deshabilitar();
        
    }
}


    private void actualizarSubtotal() {

            if (articulo != null && articulo.getId() != null) {
                if (articulo.getUnidadMedida().isEsPeso()) {
                    if (!tfPesoBalanza.getText().isEmpty()) {
                        //cargarArticulo();

                        subTotalArticulo = precioComun.getPrecio().multiply(BigDecimal.valueOf(Double.parseDouble(tfPesoBalanza.getText())));
                     }

                }
            }
        
    }


    private void llenarCbAnio() {
       cbAnio.removeAllItems();
        int year = Calendar.getInstance().get(Calendar.YEAR);
        int j=0;
        for (int i = 2016; i <= year + 1; i++) {
            cbAnio.addItem(String.valueOf(i));
            j++;
        }
        
        cbAnio.setSelectedIndex(j-2);
        
    }
    
    private void llamarDialogInventarioFind(){
        frInventarioFind daf = new frInventarioFind(this, Boolean.TRUE);
        daf.setLocationRelativeTo(null);
        daf.setVisible(Boolean.TRUE);
        
        Inventario inventarioAux = daf.getInventarioSelect();
        if(inventarioAux != null){
            mostrarInventario(daf.getInventarioSelect());
        }//fin if

    }//fin llamarDialogUnidadMedidaFind
    
    private void mostrarInventario(Inventario inventarioAux){
        inventario = inventarioAux;
        listaArticuloInventario = inventario.getVentasArticulos();
       
        
        tfInventario.setText(String.valueOf(inventario.getId()));
        dpFecha.setDate(inventario.getFecha());
        cbAnio.setSelectedItem(inventario.getAnio());
        cbMes.setSelectedItem(inventario.getAnio());
        
        //DEBERIA BUSCAR EL INVENTARIO A  LA SUCURSAL A LA CUAL PERTENECE
        sucursal = inventario.getSucursal();
        
        tfTotal.setText(new DecimalFormat("0.00").format(inventario.getTotal()));
        String sTotal = tfTotal.getText().replace(",", ".");
        total = new BigDecimal(sTotal);
        
System.out.println("Listado ArtInv: " + inventario.getVentasArticulos());
        deshabilitar();
        cargarTablaArticulos(listaArticuloInventario);

    }//fin mostrarInventario
    
  

}
