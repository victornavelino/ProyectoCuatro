/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.articulos;

import entidades.Sucursal;
import entidades.articulo.Articulo;
import entidades.articulo.Categoria;
import entidades.articulo.ListaPrecio;
import entidades.articulo.PrecioArticulo;
import entidades.articulo.SubCategoria;
import facade.ArticuloFacade;
import facade.CategoriaFacade;
import facade.ListaPrecioFacade;
import facade.PrecioArticuloFacade;
import facade.SubCategoriaFacade;
import facade.UnidadMedidaFacade;
import includes.Comunes;
import includes.ExportarExcel;
import includes.ModeloTablaNoEditable;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;

/**
 *
 * @author hugo
 */
public class DiagPrecios extends javax.swing.JDialog {

    /**
     * Creates new form DiagClienteGenerico
     */
    private String tipoOperacion;
    private javax.swing.JTextField jTextField;
    private ModeloTablaNoEditable modeloTablaArticulos;
    private Vector headers = new Vector();
    private Vector data = new Vector();
    private Articulo articulo;
    private Sucursal sucursal;
    private Articulo articuloselect;
    private BigDecimal porcentaje = new BigDecimal("0.00");
    private BigDecimal nuevoPrecio = new BigDecimal("0.00");

    public DiagPrecios(java.awt.Frame parent, boolean modal, Sucursal sucursal) {
        super(parent, modal);
        initComponents();
        this.sucursal = sucursal;
        inicializarComponentes();
    }

    public DiagPrecios(java.awt.Frame parent, boolean modal, String tipoOperacion) {
        super(parent, modal);
        initComponents();
        this.tipoOperacion = tipoOperacion;
        inicializarComponentes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgCodDesc = new javax.swing.ButtonGroup();
        bgArticulo = new javax.swing.ButtonGroup();
        btnCerrar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblArticulos = new javax.swing.JTable();
        labelNombreArticulo = new javax.swing.JLabel();
        tfArticulo = new javax.swing.JTextField();
        jbBuscar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        rbRubro = new javax.swing.JRadioButton();
        rbSubRubro = new javax.swing.JRadioButton();
        rbPorcentaje = new javax.swing.JRadioButton();
        cbCategoria = new javax.swing.JComboBox();
        labelCategoria = new javax.swing.JLabel();
        labelSubcategoria = new javax.swing.JLabel();
        cboSubCategoria = new javax.swing.JComboBox();
        cboListaPrecios = new javax.swing.JComboBox();
        labelListaPrecios = new javax.swing.JLabel();
        jtporcentaje = new javax.swing.JTextField();
        labelPorcentaje = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        labelNuevoPrecio = new javax.swing.JLabel();
        jtNuevoPrecio = new javax.swing.JTextField();
        rbPorPrecio = new javax.swing.JRadioButton();
        rbPorPorcentaje = new javax.swing.JRadioButton();
        jckTodasListas = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/back.png"))); // NOI18N
        btnCerrar.setText(org.openide.util.NbBundle.getMessage(DiagPrecios.class, "DiagAdminArticulos.btnCerrar.text")); // NOI18N
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(DiagPrecios.class, "DiagAdminArticulos.jPanel3.border.title"))); // NOI18N

        tblArticulos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Descripcion", "Marca", "Categoria", "SubCategoria", "Precio", "L.Precios", "P.Costo", "L.Costo", "Valor(%)"
            }
        ));
        jScrollPane1.setViewportView(tblArticulos);
        if (tblArticulos.getColumnModel().getColumnCount() > 0) {
            tblArticulos.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(DiagPrecios.class, "DiagAdminArticulos.tblArticulos.columnModel.title0")); // NOI18N
            tblArticulos.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(DiagPrecios.class, "DiagAdminArticulos.tblArticulos.columnModel.title1")); // NOI18N
            tblArticulos.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(DiagPrecios.class, "DiagAdminArticulos.tblArticulos.columnModel.title2")); // NOI18N
            tblArticulos.getColumnModel().getColumn(3).setHeaderValue(org.openide.util.NbBundle.getMessage(DiagPrecios.class, "DiagAdminArticulos.tblArticulos.columnModel.title3")); // NOI18N
            tblArticulos.getColumnModel().getColumn(4).setHeaderValue(org.openide.util.NbBundle.getMessage(DiagPrecios.class, "DiagAdminArticulos.tblArticulos.columnModel.title4")); // NOI18N
            tblArticulos.getColumnModel().getColumn(5).setHeaderValue(org.openide.util.NbBundle.getMessage(DiagPrecios.class, "DiagAdminArticulos.tblArticulos.columnModel.title5")); // NOI18N
            tblArticulos.getColumnModel().getColumn(6).setHeaderValue(org.openide.util.NbBundle.getMessage(DiagPrecios.class, "DiagPrecios.tblArticulos.columnModel.title9")); // NOI18N
            tblArticulos.getColumnModel().getColumn(7).setHeaderValue(org.openide.util.NbBundle.getMessage(DiagPrecios.class, "DiagAdminArticulos.tblArticulos.columnModel.title6")); // NOI18N
            tblArticulos.getColumnModel().getColumn(8).setHeaderValue(org.openide.util.NbBundle.getMessage(DiagPrecios.class, "DiagAdminArticulos.tblArticulos.columnModel.title7")); // NOI18N
            tblArticulos.getColumnModel().getColumn(9).setHeaderValue(org.openide.util.NbBundle.getMessage(DiagPrecios.class, "DiagAdminArticulos.tblArticulos.columnModel.title8")); // NOI18N
        }

        labelNombreArticulo.setText(org.openide.util.NbBundle.getMessage(DiagPrecios.class, "DiagAdminArticulos.jLabel5.text")); // NOI18N

        jbBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/buscar2.png"))); // NOI18N
        jbBuscar.setText(org.openide.util.NbBundle.getMessage(DiagPrecios.class, "DiagAdminArticulos.jbBuscar.text")); // NOI18N
        jbBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(DiagPrecios.class, "DiagAdminArticulos.jPanel1.border.title"))); // NOI18N

        bgCodDesc.add(rbRubro);
        rbRubro.setSelected(true);
        rbRubro.setText(org.openide.util.NbBundle.getMessage(DiagPrecios.class, "DiagPrecios.rbRubro.text")); // NOI18N
        rbRubro.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbRubroItemStateChanged(evt);
            }
        });

        bgCodDesc.add(rbSubRubro);
        rbSubRubro.setText(org.openide.util.NbBundle.getMessage(DiagPrecios.class, "DiagPrecios.rbSubRubro.text")); // NOI18N
        rbSubRubro.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbSubRubroItemStateChanged(evt);
            }
        });
        rbSubRubro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSubRubroActionPerformed(evt);
            }
        });

        bgCodDesc.add(rbPorcentaje);
        rbPorcentaje.setText(org.openide.util.NbBundle.getMessage(DiagPrecios.class, "DiagPrecios.rbPorcentaje.text")); // NOI18N
        rbPorcentaje.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbPorcentajeItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(rbRubro)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbSubRubro)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbPorcentaje)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rbPorcentaje)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(rbRubro)
                .addComponent(rbSubRubro))
        );

        cbCategoria.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " " }));
        cbCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCategoriaActionPerformed(evt);
            }
        });

        labelCategoria.setText(org.openide.util.NbBundle.getMessage(DiagPrecios.class, "DiagPrecios.labelCategoria.text")); // NOI18N

        labelSubcategoria.setText(org.openide.util.NbBundle.getMessage(DiagPrecios.class, "DiagPrecios.labelSubcategoria.text")); // NOI18N

        labelListaPrecios.setText(org.openide.util.NbBundle.getMessage(DiagPrecios.class, "DiagPrecios.labelListaPrecios.text")); // NOI18N

        jtporcentaje.setText(org.openide.util.NbBundle.getMessage(DiagPrecios.class, "DiagPrecios.jtporcentaje.text")); // NOI18N

        labelPorcentaje.setText(org.openide.util.NbBundle.getMessage(DiagPrecios.class, "DiagPrecios.labelPorcentaje.text")); // NOI18N

        jButton1.setText(org.openide.util.NbBundle.getMessage(DiagPrecios.class, "DiagPrecios.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        labelNuevoPrecio.setText(org.openide.util.NbBundle.getMessage(DiagPrecios.class, "DiagPrecios.labelNuevoPrecio.text")); // NOI18N

        jtNuevoPrecio.setText(org.openide.util.NbBundle.getMessage(DiagPrecios.class, "DiagPrecios.jtNuevoPrecio.text")); // NOI18N

        bgArticulo.add(rbPorPrecio);
        rbPorPrecio.setText(org.openide.util.NbBundle.getMessage(DiagPrecios.class, "DiagPrecios.rbPorPrecio.text")); // NOI18N
        rbPorPrecio.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbPorPrecioItemStateChanged(evt);
            }
        });

        bgArticulo.add(rbPorPorcentaje);
        rbPorPorcentaje.setSelected(true);
        rbPorPorcentaje.setText(org.openide.util.NbBundle.getMessage(DiagPrecios.class, "DiagPrecios.rbPorPorcentaje.text")); // NOI18N
        rbPorPorcentaje.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbPorPorcentajeItemStateChanged(evt);
            }
        });

        jckTodasListas.setText(org.openide.util.NbBundle.getMessage(DiagPrecios.class, "DiagPrecios.jckTodasListas.text")); // NOI18N
        jckTodasListas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jckTodasListasItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(113, 113, 113))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 248, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(labelNuevoPrecio)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jtNuevoPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(jPanel3Layout.createSequentialGroup()
                                                    .addComponent(labelListaPrecios)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(cboListaPrecios, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(jPanel3Layout.createSequentialGroup()
                                                    .addComponent(labelPorcentaje)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(jtporcentaje, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGap(18, 18, 18)
                                        .addComponent(jckTodasListas)
                                        .addGap(83, 83, 83))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(labelCategoria)
                                        .addGap(38, 38, 38)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(rbPorPorcentaje)
                                                .addGap(18, 18, 18)
                                                .addComponent(rbPorPrecio))
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(cbCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(labelSubcategoria)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addComponent(cboSubCategoria, 0, 144, Short.MAX_VALUE)
                                .addGap(109, 109, 109))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(labelNombreArticulo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfArticulo, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(jbBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(394, 394, 394)
                .addComponent(jButton1)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCategoria)
                    .addComponent(cbCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboSubCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelSubcategoria))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbPorPorcentaje)
                    .addComponent(rbPorPrecio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfArticulo, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelNombreArticulo)
                    .addComponent(jbBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboListaPrecios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelListaPrecios)
                    .addComponent(jckTodasListas))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtporcentaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelPorcentaje))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtNuevoPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelNuevoPrecio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(397, 397, 397)
                .addComponent(btnCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(DiagPrecios.class, "DiagPrecios.jPanel3.AccessibleContext.accessibleName")); // NOI18N

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void jbBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarActionPerformed
        if (!tfArticulo.getText().isEmpty()) {
            cargarTablaArticulos(PrecioArticuloFacade.getInstance().buscarPorDescDescCortayCodigo(tfArticulo.getText()));
        } else {
            cargarTablaArticulos(PrecioArticuloFacade.getInstance().getTodos());
        }
    }//GEN-LAST:event_jbBuscarActionPerformed

    private void rbSubRubroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSubRubroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSubRubroActionPerformed

    private void cbCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCategoriaActionPerformed
        Comunes.cargarJCombo(cboSubCategoria, SubCategoriaFacade.getInstance().buscarPorid((Categoria) cbCategoria.getSelectedItem()));
    }//GEN-LAST:event_cbCategoriaActionPerformed

    private void rbSubRubroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbSubRubroItemStateChanged
        alternarPorSubrubro();

    }//GEN-LAST:event_rbSubRubroItemStateChanged

    private void rbRubroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbRubroItemStateChanged
        alternarPorRubro();
    }//GEN-LAST:event_rbRubroItemStateChanged

    private void rbPorcentajeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbPorcentajeItemStateChanged
        alternarPorcentaje();
    }//GEN-LAST:event_rbPorcentajeItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int i = validar();
        if (i == 0) {
            confirmarActualizacion();
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void rbPorPrecioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbPorPrecioItemStateChanged
        alternarPanelPrecioPorArticulo();
        jckTodasListas.setVisible(!rbPorPrecio.isSelected());
    }//GEN-LAST:event_rbPorPrecioItemStateChanged

    private void rbPorPorcentajeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbPorPorcentajeItemStateChanged
        alternarPanelPorcentajePorArticulo();
    }//GEN-LAST:event_rbPorPorcentajeItemStateChanged

    private void jckTodasListasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jckTodasListasItemStateChanged
        if (jckTodasListas.isSelected()) {
            cboListaPrecios.setEnabled(false);
        } else {
            cboListaPrecios.setEnabled(true);
        }
    }//GEN-LAST:event_jckTodasListasItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DiagAdminArticulos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DiagAdminArticulos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DiagAdminArticulos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DiagAdminArticulos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DiagAdminArticulos dialog = new DiagAdminArticulos(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgArticulo;
    private javax.swing.ButtonGroup bgCodDesc;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JComboBox cbCategoria;
    private javax.swing.JComboBox cboListaPrecios;
    private javax.swing.JComboBox cboSubCategoria;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbBuscar;
    private javax.swing.JCheckBox jckTodasListas;
    private javax.swing.JTextField jtNuevoPrecio;
    private javax.swing.JTextField jtporcentaje;
    private javax.swing.JLabel labelCategoria;
    private javax.swing.JLabel labelListaPrecios;
    private javax.swing.JLabel labelNombreArticulo;
    private javax.swing.JLabel labelNuevoPrecio;
    private javax.swing.JLabel labelPorcentaje;
    private javax.swing.JLabel labelSubcategoria;
    private javax.swing.JRadioButton rbPorPorcentaje;
    private javax.swing.JRadioButton rbPorPrecio;
    private javax.swing.JRadioButton rbPorcentaje;
    private javax.swing.JRadioButton rbRubro;
    private javax.swing.JRadioButton rbSubRubro;
    private javax.swing.JTable tblArticulos;
    private javax.swing.JTextField tfArticulo;
    // End of variables declaration//GEN-END:variables

    private void inicializarComponentes() {
        this.setTitle("Administracion de Articulos");
        //this.rbCodigo.setSelected(true);
        labelSubcategoria.setVisible(false);
        cboSubCategoria.setVisible(false);
        labelNombreArticulo.setVisible(false);
        tfArticulo.setVisible(false);
        jbBuscar.setVisible(false);
        labelNuevoPrecio.setVisible(false);
        jtNuevoPrecio.setVisible(false);
        rbPorPorcentaje.setVisible(false);
        rbPorPrecio.setVisible(false);
        Comunes.cargarJCombo(cbCategoria, CategoriaFacade.getInstance().getTodos());

        Comunes.cargarJCombo(cboListaPrecios, ListaPrecioFacade.getInstance().getTodos());
        cargarTablaArticulos(PrecioArticuloFacade.getInstance().getTodos());

    }

    private void actualizarPrecios() {
        System.out.println("la sucursal es" + sucursal.getNombre());

        if (rbRubro.isSelected()) {

            porcentaje = BigDecimal.valueOf((Double.parseDouble(jtporcentaje.getText())) / 100);
            PrecioArticuloFacade.getInstance().actualizarPreciosCategoria(porcentaje, (Categoria) cbCategoria.getSelectedItem(), (ListaPrecio) cboListaPrecios.getSelectedItem(), sucursal, jckTodasListas.isSelected());

        }
        if (rbSubRubro.isSelected()) {

            porcentaje = BigDecimal.valueOf((Double.parseDouble(jtporcentaje.getText())) / 100);
            PrecioArticuloFacade.getInstance().actualizarPreciosSubCategoria(porcentaje, (SubCategoria) cboSubCategoria.getSelectedItem(), (ListaPrecio) cboListaPrecios.getSelectedItem(), sucursal, jckTodasListas.isSelected());

        }
        if (rbPorcentaje.isSelected()) {

            System.out.println("actualizar por articulo");

            if (rbPorPorcentaje.isSelected()) {
                porcentaje = BigDecimal.valueOf((Double.parseDouble(jtporcentaje.getText())) / 100);
                PrecioArticuloFacade.getInstance().actualizarPreciosArticuloPorPorcentaje(porcentaje, articuloselect, (ListaPrecio) cboListaPrecios.getSelectedItem(), sucursal, jckTodasListas.isSelected());

            }
            if (rbPorPrecio.isSelected()) {
                nuevoPrecio = BigDecimal.valueOf(Double.parseDouble(jtNuevoPrecio.getText()));
                PrecioArticuloFacade.getInstance().actualizarPreciosArticuloPorPrecio(nuevoPrecio, articuloselect, (ListaPrecio) cboListaPrecios.getSelectedItem(), sucursal);

            }

        }

    }

    private void confirmarActualizacion() {

        int i = JOptionPane.showConfirmDialog(this, "¿Desea Aplicar la Actualización de Precios?", "Confirmar Actualizacion", JOptionPane.YES_NO_OPTION);
        if (i == 0) {
            try {
                actualizarPrecios();
                JOptionPane.showMessageDialog(null, "Actualización Realizada");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e + " :Articulo en uso, No se puede Actualizar");
            }

        }
        cargarTablaArticulos(PrecioArticuloFacade.getInstance().getTodosActual());

    }

    private int validar() {
        int p = 0;
        //Validación para actualizar Precios por articulo
        if (rbPorcentaje.isSelected()) {
            if (tblArticulos.getSelectedRow() != -1) {
                articuloselect = ArticuloFacade.getInstance().buscar((Long) tblArticulos.getValueAt(tblArticulos.getSelectedRow(), 0));
                System.out.println("el articulo seleccionado es" + articuloselect.getDescripcion());
            } else {
                p = 1;
                JOptionPane.showMessageDialog(this, "Debe Seleccionar un Articulo", "Mensaje", JOptionPane.ERROR_MESSAGE);

            }
        }
        // Fin Validación Precios por articulo

        //Validación Actualizar precio por Articulo cuando se seleccione actualizar por precio
        if (rbPorPrecio.isSelected()) {
            if (!Comunes.validarBigDecimal(jtNuevoPrecio.getText())) {
                p = 1;
                JOptionPane.showMessageDialog(this, "Debe ingresar el Nuevo Precio en formato numerico", "Mensaje", JOptionPane.ERROR_MESSAGE);
            }

        } else {
            if (!Comunes.validarBigDecimal(jtporcentaje.getText())) {
                p = 1;
                JOptionPane.showMessageDialog(this, "Debe ingresar el porcentaje en formato numerico", "Mensaje", JOptionPane.ERROR_MESSAGE);
            }
        }
        //Validación cuando se quiere actualizar por SubRubro
        if (rbSubRubro.isSelected()) {
            if ((SubCategoria) cboSubCategoria.getSelectedItem() == null) {
                p = 1;
                JOptionPane.showMessageDialog(this, "Debe Seleccionar SubRubro", "Mensaje", JOptionPane.ERROR_MESSAGE);

            }
        }
        //fin de validacion actualizar por SubRubro

        return p;
    }

    private void cargarTablaArticulos(List<PrecioArticulo> precioArticulo) {
        modeloTablaArticulos = new ModeloTablaNoEditable();
        cargarEncabezadosTablaArticulos(modeloTablaArticulos);
        configurarTabla(tblArticulos);
        try {
            cargarArticulos(precioArticulo);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Error: " + ex);
        }
    }

    private void cargarEncabezadosTablaArticulos(ModeloTablaNoEditable modeloTablaArticulos) {
        modeloTablaArticulos.addColumn("Id");
        modeloTablaArticulos.addColumn("Descripcion");
        modeloTablaArticulos.addColumn("Marca");
        modeloTablaArticulos.addColumn("Categoría");
        modeloTablaArticulos.addColumn("Subcategoria");
        modeloTablaArticulos.addColumn("Precio");
        modeloTablaArticulos.addColumn("L.Precios");
        modeloTablaArticulos.addColumn("P.Costo");
        modeloTablaArticulos.addColumn("L.Costo");
        modeloTablaArticulos.addColumn("Valor(%)");
        tblArticulos.setModel(modeloTablaArticulos);
    }

    private void configurarTabla(JTable tbl) {
        JViewport scroll = (JViewport) tbl.getParent();
        int ancho = scroll.getWidth();
        int anchoColumna = 0;
        TableColumnModel modeloColumna = tbl.getColumnModel();
        TableColumn columnaTabla;
        for (int i = 0; i < tbl.getColumnCount(); i++) {
            columnaTabla = modeloColumna.getColumn(i);
            switch (i) {
                case 0:
                    anchoColumna = (1 * ancho) / 100;
                    break;
                case 1:
                    anchoColumna = (20 * ancho) / 100;
                    break;
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                    anchoColumna = (5 * ancho) / 100;
                    break;
            }
            columnaTabla.setPreferredWidth(anchoColumna);
            tbl.setColumnModel(modeloColumna);
        }
        tbl.getTableHeader().setFont(new java.awt.Font("Dialog",
                java.awt.Font.PLAIN, 10));
        tbl.getTableHeader().setBackground(java.awt.Color.WHITE);
        tbl.getTableHeader().setForeground(Color.BLACK);
        //Si le queremos cambiar el tamaño a la tablita
        tbl.setFont(new java.awt.Font("Dialog",
                java.awt.Font.PLAIN, 10));
    }

    private void cargarArticulos(List<PrecioArticulo> precioArticuloLst) {
        try {
            modeloTablaArticulos = new ModeloTablaNoEditable();
            cargarEncabezadosTablaArticulos(modeloTablaArticulos);
            for (PrecioArticulo precio_articulo : precioArticuloLst) {
                cargarArticulo(precio_articulo);
            }

            tblArticulos.setModel(modeloTablaArticulos);
            //Comunes.setOcultarColumnasJTable(tblArticulos, 0);
        } catch (Exception ex) {
            Logger.getLogger(DiagAdminArticulos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void cargarArticulo(PrecioArticulo precio_articulo) {

        Object[] fila = new Object[10];
        fila[0] = precio_articulo.getArticulo().getId();
        fila[1] = precio_articulo.getArticulo().getDescripcion();
        fila[2] = precio_articulo.getArticulo().getMarca().getDescripcion();
        fila[3] = precio_articulo.getArticulo().getSubCategoria().getCategoria().getDescripcion();
        fila[4] = precio_articulo.getArticulo().getSubCategoria();
        fila[5] = precio_articulo.getPrecio();
        fila[6] = precio_articulo.getListaPrecio().getDescripcion();
        fila[7] = precio_articulo.getArticulo().getPrecioCosto();

        fila[8] = precio_articulo.getArticulo().getDescuentoCosto().getListaCosto().getDescripcion();
        fila[9] = precio_articulo.getArticulo().getDescuentoCosto().getValor();

        modeloTablaArticulos.addRow(fila);
    }

    private void modificarArticulo() {
        if (tblArticulos.getSelectedRow() != -1) {
            Articulo articulo = ArticuloFacade.getInstance().buscar((Long) tblArticulos.getValueAt(tblArticulos.getSelectedRow(), 0));
            DiagArticulo diagArticulo = new DiagArticulo(null, true, "Modificación", articulo);
            diagArticulo.setLocation(Comunes.centrarDialog(diagArticulo));
            diagArticulo.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un Articulo");
        }

    }

    private void eliminarArticluo() {
        if (tblArticulos.getSelectedRow() != -1) {
            int i = JOptionPane.showConfirmDialog(this, "¿Desea eliminar el Registro seleccionado?", "Confirmar eliminacion", JOptionPane.YES_NO_OPTION);
            if (i == 0) {
                try {
                    Articulo art = ArticuloFacade.getInstance().buscar((Long) tblArticulos.getValueAt(tblArticulos.getSelectedRow(), 0));

                    for (PrecioArticulo precioArticulo : PrecioArticuloFacade.getInstance().getPreciosArticulo(art)) {
                        PrecioArticuloFacade.getInstance().eliminar(precioArticulo.getId());
                    }
                    ArticuloFacade.getInstance().eliminar((Long) tblArticulos.getValueAt(tblArticulos.getSelectedRow(), 0));
                    JOptionPane.showMessageDialog(null, "Registro eliminado");
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e + " :Articulo en uso, no se puede eliminar ");
                }

            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un Articulo");
        }
    }

    private void agregarNuevoArticulo() {
        DiagArticulo diagArticulo = new DiagArticulo(null, true, "Alta");
        diagArticulo.setLocation(Comunes.centrarDialog(diagArticulo));
        diagArticulo.setVisible(true);
    }

    private void Exportar() {
        new ExportarExcel().crearExcelJtable(tblArticulos, "Listado de Articulos");
    }

    private void Importar() {
        JFileChooser jChooser = new JFileChooser(System.getProperty("user.dir"));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos Excel", "xls");
        jChooser.setFileFilter(filter);
        jChooser.showOpenDialog(this);
        File file = jChooser.getSelectedFile();
        if (file == null || !file.getName().endsWith("xls")) {
            JOptionPane.showMessageDialog(null, "Please select only Excel file.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            leerDatosExcel(file);
            List<Integer> columnasNoEditables = new ArrayList<>();
            columnasNoEditables.add(0);
            columnasNoEditables.add(1);
            columnasNoEditables.add(2);
            columnasNoEditables.add(3);
            columnasNoEditables.add(4);
            columnasNoEditables.add(5);
            ModeloTablaNoEditable model = new ModeloTablaNoEditable(data, headers, columnasNoEditables);
            tblArticulos.setModel(model);
        }
    }

    void leerDatosExcel(File file) {
        Workbook workbook = null;
        try {
            try {
                workbook = Workbook.getWorkbook(file);
            } catch (IOException ex) {
                System.out.println("Error: " + ex);
            }
            Sheet sheet = workbook.getSheet(0);
            headers.clear();
            for (int i = 0; i < sheet.getColumns(); i++) {
                Cell cell1 = sheet.getCell(i, 0);
                headers.add(cell1.getContents());
            }
            data.clear();
            for (int j = 1; j < sheet.getRows(); j++) {
                Vector d = new Vector();
                for (int i = 0; i < sheet.getColumns(); i++) {
                    Cell cell = sheet.getCell(i, j);
                    d.add(cell.getContents());
                }
                d.add("\n");
                data.add(d);
            }
        } catch (BiffException e) {
            e.printStackTrace();
        }
    }

    private void guardar() {

        int reply = JOptionPane.showConfirmDialog(null,
                "¿Desea guardar los cambios?", "Atualizar Clientes",
                JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            try {
                guardarArticulos();
                JOptionPane.showMessageDialog(null, "Clientes actualizados correctamente");
                this.dispose();
            } catch (java.lang.NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "No se han guardado los cambios \n"
                        + "Es posible que haya ingresado un valor incorrecto",
                        "Error Guardando", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No se han guardado los cambios");
            this.dispose();
        }

    }

    private void guardarArticulos() {
        try {
            for (int i = 0; i < tblArticulos.getRowCount(); i++) {

                if (!ArticuloFacade.getInstance().getArticuloCodigo((Long) tblArticulos.getValueAt(i, 0))) {

                    articulo = new Articulo();

                    articulo.setCodigoBarra(tblArticulos.getValueAt(i, 1).toString());
                    articulo.setDescripcion(tblArticulos.getValueAt(i, 2).toString());
                    articulo.setDescripcionReducida(tblArticulos.getValueAt(i, 3).toString());

                    if (SubCategoriaFacade.getInstance().buscarPorDescripcion((String) tblArticulos.getValueAt(i, 4)) != null) {
                        articulo.setSubCategoria(SubCategoriaFacade.getInstance().buscarPorDescripcion((String) tblArticulos.getValueAt(i, 4)));
                    }

                    if (UnidadMedidaFacade.getInstance().buscaDescripcion((String) tblArticulos.getValueAt(i, 5)) != null) {
                        articulo.setUnidadMedida(UnidadMedidaFacade.getInstance().buscaDescripcion((String) tblArticulos.getValueAt(i, 5)));
                    }

                    ArticuloFacade.getInstance().alta(articulo);

                } else {

                }

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "" + e);
        }

    }

    private void alternarPanelPrecioPorArticulo() {
        /* pnArticulos.setVisible(!rbTodosLosArticulos.isSelected());
        tfPorcentajeATodos.setVisible(rbTodosLosArticulos.isSelected());
        lblPorcentajeATodos.setVisible(rbTodosLosArticulos.isSelected());
        if (rbAlgunosArticulos.isSelected()) {
            tfPorcentajeATodos.setText("0");
        } else {
            vaciarArticulos();
        }*/
        labelPorcentaje.setVisible(!rbPorPrecio.isSelected());
        jtporcentaje.setVisible(!rbPorPrecio.isSelected());

        labelNuevoPrecio.setVisible(rbPorPrecio.isSelected());
        jtNuevoPrecio.setVisible(rbPorPrecio.isSelected());

    }

    private void alternarPanelPorcentajePorArticulo() {
        /* pnArticulos.setVisible(!rbTodosLosArticulos.isSelected());
        tfPorcentajeATodos.setVisible(rbTodosLosArticulos.isSelected());
        lblPorcentajeATodos.setVisible(rbTodosLosArticulos.isSelected());
        if (rbAlgunosArticulos.isSelected()) {
            tfPorcentajeATodos.setText("0");
        } else {
            vaciarArticulos();
        }*/
        labelPorcentaje.setVisible(rbPorPorcentaje.isSelected());
        jtporcentaje.setVisible(rbPorPorcentaje.isSelected());
        jckTodasListas.setVisible(rbPorPorcentaje.isSelected());
        labelNuevoPrecio.setVisible(!rbPorPorcentaje.isSelected());
        jtNuevoPrecio.setVisible(!rbPorPorcentaje.isSelected());

    }

    private void alternarPorSubrubro() {
        labelNombreArticulo.setVisible(!rbSubRubro.isSelected());
        tfArticulo.setVisible(!rbSubRubro.isSelected());
        jbBuscar.setVisible(!rbSubRubro.isSelected());
        labelCategoria.setVisible(rbSubRubro.isSelected());
        jckTodasListas.setVisible(rbSubRubro.isSelected());
        cbCategoria.setVisible(rbSubRubro.isSelected());
        labelSubcategoria.setVisible(rbSubRubro.isSelected());
        cboSubCategoria.setVisible(rbSubRubro.isSelected());
        rbPorPorcentaje.setVisible(!rbSubRubro.isSelected());
        rbPorPrecio.setVisible(!rbSubRubro.isSelected());
        labelNuevoPrecio.setVisible(!rbSubRubro.isSelected());
        jtNuevoPrecio.setVisible(!rbSubRubro.isSelected());
        /*lblArticulosDondeSeAplica.setVisible(!rbPrecio.isSelected());
        rbAlgunosArticulos.setVisible(!rbPrecio.isSelected());
        rbTodosLosArticulos.setVisible(!rbPrecio.isSelected());
        lblPorcentajeATodos.setVisible(!rbPrecio.isSelected());
        tfPorcentajeATodos.setVisible(!rbPrecio.isSelected());
        if (rbPrecio.isSelected()) {
            tfPorcentajeATodos.setText("0");
            rbAlgunosArticulos.setSelected(true);
        }
        alternarPanel();*/
    }

    private void alternarPorRubro() {
        labelNombreArticulo.setVisible(!rbRubro.isSelected());
        tfArticulo.setVisible(!rbRubro.isSelected());
        jbBuscar.setVisible(!rbRubro.isSelected());
        labelCategoria.setVisible(rbRubro.isSelected());
        jckTodasListas.setVisible(rbRubro.isSelected());
        cbCategoria.setVisible(rbRubro.isSelected());
        labelSubcategoria.setVisible(!rbRubro.isSelected());
        cboSubCategoria.setVisible(!rbRubro.isSelected());
        rbPorPorcentaje.setVisible(!rbRubro.isSelected());
        rbPorPrecio.setVisible(!rbRubro.isSelected());
        labelNuevoPrecio.setVisible(!rbRubro.isSelected());
        jtNuevoPrecio.setVisible(!rbRubro.isSelected());
        /*lblArticulosDondeSeAplica.setVisible(!rbPrecio.isSelected());
        rbAlgunosArticulos.setVisible(!rbPrecio.isSelected());
        rbTodosLosArticulos.setVisible(!rbPrecio.isSelected());
        lblPorcentajeATodos.setVisible(!rbPrecio.isSelected());
        tfPorcentajeATodos.setVisible(!rbPrecio.isSelected());
        if (rbPrecio.isSelected()) {
            tfPorcentajeATodos.setText("0");
            rbAlgunosArticulos.setSelected(true);
        }
        alternarPanel();*/
    }

    private void alternarPorcentaje() {

        labelNombreArticulo.setVisible(rbPorcentaje.isSelected());
        tfArticulo.setVisible(rbPorcentaje.isSelected());
        jbBuscar.setVisible(rbPorcentaje.isSelected());
        jckTodasListas.setVisible(rbPorcentaje.isSelected());
        rbPorPorcentaje.setVisible(rbPorcentaje.isSelected());
        rbPorPrecio.setVisible(rbPorcentaje.isSelected());
        labelCategoria.setVisible(!rbPorcentaje.isSelected());
        cbCategoria.setVisible(!rbPorcentaje.isSelected());
        labelSubcategoria.setVisible(!rbPorcentaje.isSelected());
        cboSubCategoria.setVisible(!rbPorcentaje.isSelected());
        labelNuevoPrecio.setVisible(!rbPorcentaje.isSelected());
        jtNuevoPrecio.setVisible(!rbPorcentaje.isSelected());
    }
}
